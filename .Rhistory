require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/DataVisualization/DV_SProject/01 Data")
file_path <- "2011_final_grade.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("DISTrictNUMBER", "SCHOOLNUMBER", "AEC_10", "Charter", "Online", "EMH_2lvl", "LT100pnts", "School_Grade", "rank_tot", "Overall_ACH_Grade", "Read_Ach_Grade", "Math_Ach_Grade", "Write_Ach_Grade", "Sci_Ach_Grade", "Overall_Weighted_Growth_Grade", "Read_Growth_Grade", "Math_Growth_Grade", "Write_Growth_Grade", "SPF_PS_IND_GRAD_RATE")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
#df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
#df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
# 01-two-inputs
source('~/DataVisualization/RWorkshop/09 Shiny/How-to-start-2/code/01-two-inputs.R')
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Histogram of Random Normal Values"),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title)
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/01Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/01Crosstab')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
runApp(02 Shiny)
runApp(02 Shiny)
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Dashboard')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/02Crosstab')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
df <- data.frame(fromJSON(getURL(URLencode('skipper.cs.utexas.edu:5001/rest/native/?query="select * from final_grade"'),httpheader=c(DB='jdbc:oracle:thin:@sayonara.microlab.cs.utexas.edu:1521:orcl', USER='C##cs329e_mh42375', PASS='orcl_mh42375', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/01Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/01Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/01Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/02Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/02Crosstab')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
})
geom_params=list(alpha=rv$alpha),
layer(data=df1(),
shinyServer(function(input, output) {
source('~/DataVisualization/DV_SProject/02 Shiny/test_server.R')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_SProject/02 Shiny')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('02 Shiny')
shiny::runApp('02 Shiny')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
shiny::runApp('~/DataVisualization/RWorkshop/09 Shiny/03Crosstab')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('02 Shiny')
shiny::runApp('~/DataVisualization/DV_RProject1')
shiny::runApp('02 Shiny')
